/*
 * The MIT License
 *
 * Copyright 2019 Sam Jakob Mearns <me@samjakob.com>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.samjakob.chunguschat;

import com.samjakob.chunguschat.socket.ChungusFileTransfer;
import com.samjakob.chunguschat.socket.ChungusProtocolVersionMap;
import com.samjakob.chunguschat.socket.ChungusProtocol;
import com.samjakob.chunguschat.socket.ChungusSocket;
import com.samjakob.chunguschat.socket.ChungusSocketServer;
import com.samjakob.chunguschat.socket.PropertyUpdatedCallback;
import java.awt.Desktop;
import java.awt.Image;
import java.io.File;
import java.net.InetAddress;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ThreadLocalRandom;

import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Sam Jakob Mearns <me@samjakob.com>
 */
public class MainWindow extends javax.swing.JFrame {

    private String username;
    private List<String> messages;
    private ChungusSocket activeSocket;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        ChungusProtocolVersionMap protocolVersion =
                        ChungusProtocolVersionMap.forProtocolVersion(ChungusProtocol.PROTOCOL_VERSION);
        
        if(protocolVersion == null) {
            System.err.println("Invalid protocol version: " + ChungusProtocol.PROTOCOL_VERSION);
            System.exit(1);
        }
        
        this.setTitle(
                "ChungusChat [" +
                protocolVersion.getVersionName() + "]"
        );

        username = "AnonymousChungus" + ThreadLocalRandom.current().nextInt(10000, 100000);
        messages = new ArrayList<>();
        
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource("chungus.png"));
        this.setIconImage(icon.getImage());
        
        ImageIcon bigChungus = new ImageIcon(getClass().getClassLoader().getResource("chungus.png"));
        bigChungusImage.setIcon(new ImageIcon(bigChungus.getImage().getScaledInstance(
                bigChungusImage.getWidth(),
                bigChungusImage.getHeight(),
                Image.SCALE_SMOOTH
        )));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        messageList = new javax.swing.JList<>();
        messageField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        userListTitle = new javax.swing.JLabel();
        userListWrapper = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        connectedToLabel = new javax.swing.JLabel();
        connectedTo = new javax.swing.JLabel();
        bigChungusImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ChungusChat");
        setMaximumSize(new java.awt.Dimension(739, 409));
        setMinimumSize(new java.awt.Dimension(739, 409));
        setResizable(false);

        messageList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listItemSelectionChanged(evt);
            }
        });
        jScrollPane1.setViewportView(messageList);

        messageField.setToolTipText("");
        messageField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        messageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageFieldActionPerformed(evt);
            }
        });
        messageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageFieldKeyPressed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonAction(evt);
            }
        });

        userListTitle.setText("Online Users");

        userListWrapper.setViewportView(userList);

        connectedToLabel.setText("Connected to:");

        connectedTo.setText("--");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connectedTo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectedToLabel)
                    .addComponent(userListTitle))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bigChungusImage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userListWrapper))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connectedToLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectedTo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userListTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(userListWrapper, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bigChungusImage, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void messageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageFieldActionPerformed

    private void sendButtonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonAction
        String message = messageField.getText();
        messageField.setText("");
        
        if(message.length() < 1) return;
        
        if(handleCommand(message)){
            return;
        }

        try {
            activeSocket.sendChatMessage("[" + username + "] " + message);
        }catch (Exception ex){
            this.addMessage("[SYSTEM] You are not connected to any server.");
        }
    }//GEN-LAST:event_sendButtonAction

    private void messageFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageFieldKeyPressed
        if(evt.getKeyCode() == 0x0A){
            sendButtonAction(null);
        }
    }//GEN-LAST:event_messageFieldKeyPressed

    private void listItemSelectionChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listItemSelectionChanged
        
        if(evt.getValueIsAdjusting() || messageList.getSelectedValue() == null) return;
        
        String item = messageList.getSelectedValue();
        messageList.clearSelection();
        
        if(item.startsWith("[Download] ")){
            String[] segments = item.split(" ");
            if(segments.length >= 2){
                String fileName = segments[1];
                
                
            }
            System.out.println("Initiate file transfer...");
        }
        
        if(item.startsWith("[Link] ")){
            String[] segments = item.split(" ");
            if(segments.length >= 2){
                String url = segments[1];
                
                try {
                    Desktop.getDesktop().browse(new URI(url));
                }catch(Exception ex){}
            }
        }
        
        return;
        
    }//GEN-LAST:event_listItemSelectionChanged

    private boolean handleCommand(String command){
        if(!command.startsWith("/")) return false;
        String[] segments = command.split(" ");
        String root = segments[0];
        String[] arguments = new String[0];
        
        if(segments.length > 1) {
            arguments = new String[segments.length - 1];
            System.arraycopy(segments, 1, arguments, 0, segments.length - 1);
        }
        
        switch(root){
            case "/host":
                try {
                    new ChungusSocketServer().host();

                    InetAddress[] all = InetAddress.getAllByName(InetAddress.getLocalHost().getCanonicalHostName());
                    String ip = all[0].getHostAddress();

                    addMessage("[SYSTEM] You are now hosting on [" + ip + "]...");
                    handleCommand("/connect 127.0.0.1");
                    
                    connectedToLabel.setText("Hosting:");
                    connectedTo.setText(ip);
                    
                    return true;
                }catch(Exception ex){
                    addMessage("[SYSTEM] Failed to establish IP address.");
                    return true;
                }
            case "/connect":
            case "/join":
                if(arguments.length < 1){
                    addMessage("[SYSTEM] You must specify a host to connect to.");
                    return true;
                }
                
                addMessage("[SYSTEM] Connecting to " + arguments[0]);
                activeSocket = new ChungusSocket(this::addMessage, this::handleCommand, this::handleDisconnect, this::onPropertyUpdated, this::onTransferOffer);
                activeSocket.connect(arguments[0], ChungusSocketServer.CHUNGUS_CHAT_PORT, username);
                connectedTo.setText(arguments[0]);
                
                addMessage("");
                handleCommand("/username");
                addMessage("");
                handleCommand("/users");
                addMessage("");
                addMessage("");
                handleCommand("/motd");
                
                new Timer().scheduleAtFixedRate(new TimerTask(){
                    @Override
                    public void run(){
                        if(!activeSocket.isConnected()){
                            this.cancel();
                            return;
                        }
                        
                        activeSocket.sendCommand(
                            ChungusProtocol.COMMAND_USERS | ChungusProtocol.PROTO_MASK_SILENT_COMMAND
                        );
                    }
                }, 0, 500);
                return true;
            case "/users":
            case "/list":
                activeSocket.sendCommand(ChungusProtocol.COMMAND_USERS);
                return true;
            case "/username":
                if(arguments.length < 1) {
                    addMessage("[SYSTEM] You are called " + username);
                    return true;
                }

                if(arguments[0].length() > 0) {
                    activeSocket.changeUsername(username, arguments[0]);
                    this.username = arguments[0];
                }else{
                    addMessage("Invalid username.");
                }
                return true;
            case "/motd":
                if(arguments.length < 1) {
                    activeSocket.sendCommand(ChungusProtocol.MOTD);
                    return true;
                }

                activeSocket.setMotd(String.join(" ", arguments));
                addMessage("MOTD updated to: " + String.join(" ", arguments));
                return true;
            
            case "/upload":
                String path = "";
                
                if(arguments.length < 1){
                    JFileChooser fileChooser = new JFileChooser();
                    int returnValue = fileChooser.showDialog(this, "Upload");
                    path = fileChooser.getSelectedFile().getAbsolutePath().toString();
                    this.messageField.setText("/upload " + path);
                    
                    return true;
                }
                
                File file = new File(String.join(" ", arguments));
                if(!file.exists()){
                    addMessage("File not found.");
                    return true;
                }
                
                // File size (in bytes)
                long fileSize = file.length();
                
                try {
                    new ChungusFileTransfer(this.username, this.connectedTo.getText(), file, fileSize).start();
                }catch(Exception ex){
                    addMessage("File transfer failed.");
                }
                return true;
        }

        addMessage("[SYSTEM] Unknown command.");
        return true;
    }
    
    private void addMessage(String message){
        messages.add(message);
        refreshMessages();
    }

    private void handleCommand(int command, Object data){
        switch(command){
            case ChungusProtocol.COMMAND_USERS:
                String[] userList = (String[]) data;
                addMessage("[SYSTEM] There are " + userList.length + " users online:");
                addMessage(Arrays.toString(userList));
                break;
        }
    }
    
    private void refreshMessages(){
        DefaultListModel<String> model = new DefaultListModel<>();
        messages.forEach(model::addElement);
        messageList.setModel(model);
        
        // Scroll messages pane to the end.
        SwingUtilities.invokeLater(() -> {
            JScrollPane scrollPane = jScrollPane1;
            JScrollBar vertical = scrollPane.getVerticalScrollBar();
            vertical.setValue(vertical.getMaximum());
        });
    }
    
    private void handleDisconnect(){
        if(!this.activeSocket.isConnected()) return;
        
        addMessage("[SYSTEM] You have been disconnected from " + this.connectedTo.getText());
        this.connectedTo.setText("--");
        this.activeSocket.close();
    }
    
    private void onPropertyUpdated(PropertyUpdatedCallback.Property property, Object data){
        switch(property){
            case USER_LIST:
                List<String> users = Arrays.asList((String[]) data);
                
                DefaultListModel<String> userListModel = new DefaultListModel<>();
                users.forEach(userListModel::addElement);
                userList.setModel(userListModel);
                break;
        }
    }
    
    private void onTransferOffer(String fileName, long fileSize){
        addMessage("[Download] " + fileName + " [" + fileSize + " bytes]");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bigChungusImage;
    private javax.swing.JLabel connectedTo;
    private javax.swing.JLabel connectedToLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField messageField;
    private javax.swing.JList<String> messageList;
    private javax.swing.JButton sendButton;
    private javax.swing.JList<String> userList;
    private javax.swing.JLabel userListTitle;
    private javax.swing.JScrollPane userListWrapper;
    // End of variables declaration//GEN-END:variables
}
